//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/WorkSpace (LSB)/KeyBoardInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyBoardInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyBoardInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyBoardInputActions"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""a0036ea9-bffd-4917-b8f7-9d7153a2f161"",
            ""actions"": [
                {
                    ""name"": ""FrontBack"",
                    ""type"": ""Value"",
                    ""id"": ""5e0bfe82-2576-4f12-a016-ff4d4d40457b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""9ed03e60-3125-49bf-8fe6-35893b0b8bb3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""60805940-7487-4911-b4ca-b701630b3465"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookLeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""d108bc7a-325c-4390-9cce-7790dd2bc600"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""1856af4f-e0cb-4598-bb87-4c72c8011063"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LightControl"",
                    ""type"": ""Button"",
                    ""id"": ""429cd8a6-e253-464e-829f-88215a31331e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GearChange"",
                    ""type"": ""Button"",
                    ""id"": ""510db631-9f42-4d41-b1ee-f72ca05c5ee3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SideBreak"",
                    ""type"": ""Button"",
                    ""id"": ""e1de7e18-169f-4c46-8a17-6ea2bca01419"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""f98fc873-4960-47bf-b41a-11f8440f548c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb8bc377-5795-499c-b6a6-26050be78172"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7cf16df-15e2-49a2-92a1-62ee191a48e2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""FrontBack"",
                    ""id"": ""acbe123e-fb56-4c00-9b0a-21e2f189c635"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontBack"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1912bfb5-a773-47f4-aaee-b8cf2ac390c2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""FrontBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9d5a5c43-07db-479c-8268-cbdd08b6f622"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""74b1d4d2-c3b9-4af7-9c38-8e17a95926d7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ebab6cb8-66ae-4b77-bfa5-5d5c2a460f71"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0a8bd24c-d038-4f49-b256-eb679bd2938a"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b4f5c528-b523-4d3c-9d24-8f390c5b5309"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0343284f-d664-4a1b-8e53-309ed2c9935a"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""079defc9-25bd-4f66-a30b-bfbda0990f6b"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""64541d6a-8b3e-4f5c-a051-a8a8e9c9679c"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""545a9d0e-7983-4252-bd44-dc3c9b50dffc"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6da3e15d-b756-4e3b-93d2-7d7e181e4a0c"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""031ea02e-6700-4074-825d-01918957671c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81b4d180-574c-42f0-bb81-e026b0b5e015"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4b0bb7d-b36e-48bd-9935-4de4da00cdc3"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5c8993-af93-486f-8952-c3205e8f182c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90160c9f-4acf-4831-8ec8-65113f407f60"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d5319d-b749-450f-aff9-34594c97397c"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""SideBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_FrontBack = m_Car.FindAction("FrontBack", throwIfNotFound: true);
        m_Car_LeftRight = m_Car.FindAction("LeftRight", throwIfNotFound: true);
        m_Car_Break = m_Car.FindAction("Break", throwIfNotFound: true);
        m_Car_LookLeftRight = m_Car.FindAction("LookLeftRight", throwIfNotFound: true);
        m_Car_LookUpDown = m_Car.FindAction("LookUpDown", throwIfNotFound: true);
        m_Car_LightControl = m_Car.FindAction("LightControl", throwIfNotFound: true);
        m_Car_GearChange = m_Car.FindAction("GearChange", throwIfNotFound: true);
        m_Car_SideBreak = m_Car.FindAction("SideBreak", throwIfNotFound: true);
    }

    ~@KeyBoardInputActions()
    {
        UnityEngine.Debug.Assert(!m_Car.enabled, "This will cause a leak and performance issues, KeyBoardInputActions.Car.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private List<ICarActions> m_CarActionsCallbackInterfaces = new List<ICarActions>();
    private readonly InputAction m_Car_FrontBack;
    private readonly InputAction m_Car_LeftRight;
    private readonly InputAction m_Car_Break;
    private readonly InputAction m_Car_LookLeftRight;
    private readonly InputAction m_Car_LookUpDown;
    private readonly InputAction m_Car_LightControl;
    private readonly InputAction m_Car_GearChange;
    private readonly InputAction m_Car_SideBreak;
    public struct CarActions
    {
        private @KeyBoardInputActions m_Wrapper;
        public CarActions(@KeyBoardInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FrontBack => m_Wrapper.m_Car_FrontBack;
        public InputAction @LeftRight => m_Wrapper.m_Car_LeftRight;
        public InputAction @Break => m_Wrapper.m_Car_Break;
        public InputAction @LookLeftRight => m_Wrapper.m_Car_LookLeftRight;
        public InputAction @LookUpDown => m_Wrapper.m_Car_LookUpDown;
        public InputAction @LightControl => m_Wrapper.m_Car_LightControl;
        public InputAction @GearChange => m_Wrapper.m_Car_GearChange;
        public InputAction @SideBreak => m_Wrapper.m_Car_SideBreak;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void AddCallbacks(ICarActions instance)
        {
            if (instance == null || m_Wrapper.m_CarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarActionsCallbackInterfaces.Add(instance);
            @FrontBack.started += instance.OnFrontBack;
            @FrontBack.performed += instance.OnFrontBack;
            @FrontBack.canceled += instance.OnFrontBack;
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
            @LookLeftRight.started += instance.OnLookLeftRight;
            @LookLeftRight.performed += instance.OnLookLeftRight;
            @LookLeftRight.canceled += instance.OnLookLeftRight;
            @LookUpDown.started += instance.OnLookUpDown;
            @LookUpDown.performed += instance.OnLookUpDown;
            @LookUpDown.canceled += instance.OnLookUpDown;
            @LightControl.started += instance.OnLightControl;
            @LightControl.performed += instance.OnLightControl;
            @LightControl.canceled += instance.OnLightControl;
            @GearChange.started += instance.OnGearChange;
            @GearChange.performed += instance.OnGearChange;
            @GearChange.canceled += instance.OnGearChange;
            @SideBreak.started += instance.OnSideBreak;
            @SideBreak.performed += instance.OnSideBreak;
            @SideBreak.canceled += instance.OnSideBreak;
        }

        private void UnregisterCallbacks(ICarActions instance)
        {
            @FrontBack.started -= instance.OnFrontBack;
            @FrontBack.performed -= instance.OnFrontBack;
            @FrontBack.canceled -= instance.OnFrontBack;
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
            @LookLeftRight.started -= instance.OnLookLeftRight;
            @LookLeftRight.performed -= instance.OnLookLeftRight;
            @LookLeftRight.canceled -= instance.OnLookLeftRight;
            @LookUpDown.started -= instance.OnLookUpDown;
            @LookUpDown.performed -= instance.OnLookUpDown;
            @LookUpDown.canceled -= instance.OnLookUpDown;
            @LightControl.started -= instance.OnLightControl;
            @LightControl.performed -= instance.OnLightControl;
            @LightControl.canceled -= instance.OnLightControl;
            @GearChange.started -= instance.OnGearChange;
            @GearChange.performed -= instance.OnGearChange;
            @GearChange.canceled -= instance.OnGearChange;
            @SideBreak.started -= instance.OnSideBreak;
            @SideBreak.performed -= instance.OnSideBreak;
            @SideBreak.canceled -= instance.OnSideBreak;
        }

        public void RemoveCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarActions instance)
        {
            foreach (var item in m_Wrapper.m_CarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarActions @Car => new CarActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface ICarActions
    {
        void OnFrontBack(InputAction.CallbackContext context);
        void OnLeftRight(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
        void OnLookLeftRight(InputAction.CallbackContext context);
        void OnLookUpDown(InputAction.CallbackContext context);
        void OnLightControl(InputAction.CallbackContext context);
        void OnGearChange(InputAction.CallbackContext context);
        void OnSideBreak(InputAction.CallbackContext context);
    }
}
