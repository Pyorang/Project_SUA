//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Scripts/KeyBoardInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/KeyBoardInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @KeyBoardInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @KeyBoardInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyBoardInputActions"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""a0036ea9-bffd-4917-b8f7-9d7153a2f161"",
            ""actions"": [
                {
                    ""name"": ""FrontBack"",
                    ""type"": ""Value"",
                    ""id"": ""5e0bfe82-2576-4f12-a016-ff4d4d40457b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""9ed03e60-3125-49bf-8fe6-35893b0b8bb3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Value"",
                    ""id"": ""60805940-7487-4911-b4ca-b701630b3465"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookLeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""d108bc7a-325c-4390-9cce-7790dd2bc600"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookUpDown"",
                    ""type"": ""Value"",
                    ""id"": ""1856af4f-e0cb-4598-bb87-4c72c8011063"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LightControl"",
                    ""type"": ""Button"",
                    ""id"": ""429cd8a6-e253-464e-829f-88215a31331e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GearChange"",
                    ""type"": ""Button"",
                    ""id"": ""510db631-9f42-4d41-b1ee-f72ca05c5ee3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SideBreak"",
                    ""type"": ""Button"",
                    ""id"": ""e1de7e18-169f-4c46-8a17-6ea2bca01419"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Settings"",
                    ""type"": ""Button"",
                    ""id"": ""8e415243-3734-4de5-b841-69d9459d7326"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""f98fc873-4960-47bf-b41a-11f8440f548c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb8bc377-5795-499c-b6a6-26050be78172"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7cf16df-15e2-49a2-92a1-62ee191a48e2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""b0153f88-b103-4914-86e8-7755536154e1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""63d8a26c-4357-4edc-862f-032b930880b6"",
                    ""path"": ""<HID::Wired Wheel>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""42f47395-321f-4e2d-b88f-93e3d6c46443"",
                    ""path"": ""<HID::Wired Wheel>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""790515d8-0f89-4d17-9dc3-780fd48dc893"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""FrontBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe1db336-a73e-434a-9761-f89822763a4a"",
                    ""path"": ""<HID::Wired Wheel>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""FrontBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d5a5c43-07db-479c-8268-cbdd08b6f622"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5c48644-b421-45a2-a330-fcace22b0f8d"",
                    ""path"": ""<HID::Wired Wheel>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""74b1d4d2-c3b9-4af7-9c38-8e17a95926d7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ebab6cb8-66ae-4b77-bfa5-5d5c2a460f71"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0a8bd24c-d038-4f49-b256-eb679bd2938a"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""31430884-89d3-4253-bf3d-d5dea01d13a7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8a1029b3-8264-4eb5-8404-b73c026868f9"",
                    ""path"": ""<HID::Wired Wheel>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""79de8f7a-0c70-4b04-8efc-70b706745bc5"",
                    ""path"": ""<HID::Wired Wheel>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LookLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b4f5c528-b523-4d3c-9d24-8f390c5b5309"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0343284f-d664-4a1b-8e53-309ed2c9935a"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse;Steering Wheel"",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""079defc9-25bd-4f66-a30b-bfbda0990f6b"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse;Steering Wheel"",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7cd2c854-b3d6-46db-baea-aa27e140c32d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f2ef41cd-7935-4eb6-92f3-c3a9909eab93"",
                    ""path"": ""<HID::Wired Wheel>/hat/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4b3463f6-15cf-484d-9248-7f9d0844f2c4"",
                    ""path"": ""<HID::Wired Wheel>/hat/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LookUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6da3e15d-b756-4e3b-93d2-7d7e181e4a0c"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""LightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65f0afd6-06b5-40d6-ae73-1ad89dbb2d1f"",
                    ""path"": ""<HID::Wired Wheel>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""LightControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81b4d180-574c-42f0-bb81-e026b0b5e015"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4b0bb7d-b36e-48bd-9935-4de4da00cdc3"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5c8993-af93-486f-8952-c3205e8f182c"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90160c9f-4acf-4831-8ec8-65113f407f60"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c53db9e-a305-4675-9590-4ee17481be0a"",
                    ""path"": ""<HID::Wired Wheel>/button17"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12573cec-32bb-4bf1-9ae0-2ddebb9626ae"",
                    ""path"": ""<HID::Wired Wheel>/button18"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16da8d8d-a8f0-42c9-b335-bdb45a9fa13a"",
                    ""path"": ""<HID::Wired Wheel>/button21"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""000fb4ee-fc3e-455a-b4b1-af89fbadea78"",
                    ""path"": ""<HID::Wired Wheel>/button22"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""GearChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78d5319d-b749-450f-aff9-34594c97397c"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""SideBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1c9a434-9826-406b-b3df-17472f02679a"",
                    ""path"": ""<HID::Wired Wheel>/button16"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""SideBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b3aa441-344e-4a08-8631-d32cff39fb2b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard & Mouse"",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a32929-5b11-4eff-9f30-0778923f3b9a"",
                    ""path"": ""<HID::Wired Wheel>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Steering Wheel"",
                    ""action"": ""Settings"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Steering Wheel"",
            ""bindingGroup"": ""Steering Wheel"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<HID::Wired Wheel>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_FrontBack = m_Car.FindAction("FrontBack", throwIfNotFound: true);
        m_Car_LeftRight = m_Car.FindAction("LeftRight", throwIfNotFound: true);
        m_Car_Break = m_Car.FindAction("Break", throwIfNotFound: true);
        m_Car_LookLeftRight = m_Car.FindAction("LookLeftRight", throwIfNotFound: true);
        m_Car_LookUpDown = m_Car.FindAction("LookUpDown", throwIfNotFound: true);
        m_Car_LightControl = m_Car.FindAction("LightControl", throwIfNotFound: true);
        m_Car_GearChange = m_Car.FindAction("GearChange", throwIfNotFound: true);
        m_Car_SideBreak = m_Car.FindAction("SideBreak", throwIfNotFound: true);
        m_Car_Settings = m_Car.FindAction("Settings", throwIfNotFound: true);
    }

    ~@KeyBoardInputActions()
    {
        UnityEngine.Debug.Assert(!m_Car.enabled, "This will cause a leak and performance issues, KeyBoardInputActions.Car.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private List<ICarActions> m_CarActionsCallbackInterfaces = new List<ICarActions>();
    private readonly InputAction m_Car_FrontBack;
    private readonly InputAction m_Car_LeftRight;
    private readonly InputAction m_Car_Break;
    private readonly InputAction m_Car_LookLeftRight;
    private readonly InputAction m_Car_LookUpDown;
    private readonly InputAction m_Car_LightControl;
    private readonly InputAction m_Car_GearChange;
    private readonly InputAction m_Car_SideBreak;
    private readonly InputAction m_Car_Settings;
    /// <summary>
    /// Provides access to input actions defined in input action map "Car".
    /// </summary>
    public struct CarActions
    {
        private @KeyBoardInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CarActions(@KeyBoardInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Car/FrontBack".
        /// </summary>
        public InputAction @FrontBack => m_Wrapper.m_Car_FrontBack;
        /// <summary>
        /// Provides access to the underlying input action "Car/LeftRight".
        /// </summary>
        public InputAction @LeftRight => m_Wrapper.m_Car_LeftRight;
        /// <summary>
        /// Provides access to the underlying input action "Car/Break".
        /// </summary>
        public InputAction @Break => m_Wrapper.m_Car_Break;
        /// <summary>
        /// Provides access to the underlying input action "Car/LookLeftRight".
        /// </summary>
        public InputAction @LookLeftRight => m_Wrapper.m_Car_LookLeftRight;
        /// <summary>
        /// Provides access to the underlying input action "Car/LookUpDown".
        /// </summary>
        public InputAction @LookUpDown => m_Wrapper.m_Car_LookUpDown;
        /// <summary>
        /// Provides access to the underlying input action "Car/LightControl".
        /// </summary>
        public InputAction @LightControl => m_Wrapper.m_Car_LightControl;
        /// <summary>
        /// Provides access to the underlying input action "Car/GearChange".
        /// </summary>
        public InputAction @GearChange => m_Wrapper.m_Car_GearChange;
        /// <summary>
        /// Provides access to the underlying input action "Car/SideBreak".
        /// </summary>
        public InputAction @SideBreak => m_Wrapper.m_Car_SideBreak;
        /// <summary>
        /// Provides access to the underlying input action "Car/Settings".
        /// </summary>
        public InputAction @Settings => m_Wrapper.m_Car_Settings;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CarActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CarActions" />
        public void AddCallbacks(ICarActions instance)
        {
            if (instance == null || m_Wrapper.m_CarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarActionsCallbackInterfaces.Add(instance);
            @FrontBack.started += instance.OnFrontBack;
            @FrontBack.performed += instance.OnFrontBack;
            @FrontBack.canceled += instance.OnFrontBack;
            @LeftRight.started += instance.OnLeftRight;
            @LeftRight.performed += instance.OnLeftRight;
            @LeftRight.canceled += instance.OnLeftRight;
            @Break.started += instance.OnBreak;
            @Break.performed += instance.OnBreak;
            @Break.canceled += instance.OnBreak;
            @LookLeftRight.started += instance.OnLookLeftRight;
            @LookLeftRight.performed += instance.OnLookLeftRight;
            @LookLeftRight.canceled += instance.OnLookLeftRight;
            @LookUpDown.started += instance.OnLookUpDown;
            @LookUpDown.performed += instance.OnLookUpDown;
            @LookUpDown.canceled += instance.OnLookUpDown;
            @LightControl.started += instance.OnLightControl;
            @LightControl.performed += instance.OnLightControl;
            @LightControl.canceled += instance.OnLightControl;
            @GearChange.started += instance.OnGearChange;
            @GearChange.performed += instance.OnGearChange;
            @GearChange.canceled += instance.OnGearChange;
            @SideBreak.started += instance.OnSideBreak;
            @SideBreak.performed += instance.OnSideBreak;
            @SideBreak.canceled += instance.OnSideBreak;
            @Settings.started += instance.OnSettings;
            @Settings.performed += instance.OnSettings;
            @Settings.canceled += instance.OnSettings;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CarActions" />
        private void UnregisterCallbacks(ICarActions instance)
        {
            @FrontBack.started -= instance.OnFrontBack;
            @FrontBack.performed -= instance.OnFrontBack;
            @FrontBack.canceled -= instance.OnFrontBack;
            @LeftRight.started -= instance.OnLeftRight;
            @LeftRight.performed -= instance.OnLeftRight;
            @LeftRight.canceled -= instance.OnLeftRight;
            @Break.started -= instance.OnBreak;
            @Break.performed -= instance.OnBreak;
            @Break.canceled -= instance.OnBreak;
            @LookLeftRight.started -= instance.OnLookLeftRight;
            @LookLeftRight.performed -= instance.OnLookLeftRight;
            @LookLeftRight.canceled -= instance.OnLookLeftRight;
            @LookUpDown.started -= instance.OnLookUpDown;
            @LookUpDown.performed -= instance.OnLookUpDown;
            @LookUpDown.canceled -= instance.OnLookUpDown;
            @LightControl.started -= instance.OnLightControl;
            @LightControl.performed -= instance.OnLightControl;
            @LightControl.canceled -= instance.OnLightControl;
            @GearChange.started -= instance.OnGearChange;
            @GearChange.performed -= instance.OnGearChange;
            @GearChange.canceled -= instance.OnGearChange;
            @SideBreak.started -= instance.OnSideBreak;
            @SideBreak.performed -= instance.OnSideBreak;
            @SideBreak.canceled -= instance.OnSideBreak;
            @Settings.started -= instance.OnSettings;
            @Settings.performed -= instance.OnSettings;
            @Settings.canceled -= instance.OnSettings;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CarActions.UnregisterCallbacks(ICarActions)" />.
        /// </summary>
        /// <seealso cref="CarActions.UnregisterCallbacks(ICarActions)" />
        public void RemoveCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CarActions.AddCallbacks(ICarActions)" />
        /// <seealso cref="CarActions.RemoveCallbacks(ICarActions)" />
        /// <seealso cref="CarActions.UnregisterCallbacks(ICarActions)" />
        public void SetCallbacks(ICarActions instance)
        {
            foreach (var item in m_Wrapper.m_CarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CarActions" /> instance referencing this action map.
    /// </summary>
    public CarActions @Car => new CarActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_SteeringWheelSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme SteeringWheelScheme
    {
        get
        {
            if (m_SteeringWheelSchemeIndex == -1) m_SteeringWheelSchemeIndex = asset.FindControlSchemeIndex("Steering Wheel");
            return asset.controlSchemes[m_SteeringWheelSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Car" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CarActions.AddCallbacks(ICarActions)" />
    /// <seealso cref="CarActions.RemoveCallbacks(ICarActions)" />
    public interface ICarActions
    {
        /// <summary>
        /// Method invoked when associated input action "FrontBack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFrontBack(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Break" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnBreak(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LookLeftRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLookLeftRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LookUpDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLookUpDown(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LightControl" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLightControl(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GearChange" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGearChange(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SideBreak" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSideBreak(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Settings" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSettings(InputAction.CallbackContext context);
    }
}
